#include<stdio.h>
#include<stdlib.h>

typedef struct node {
int data;
struct node *llink;
struct node *rlink;
}node;

node* create();
void preorder(node *t);
void inorder(node *t);
void postorder(node *t);

void main() {
node *root=NULL;
int choice;
while(1) {
printf("\nEnter 1 for creation\nEnter 2 for Preorder traversal\nEnter 3 for inorder traversal\nEnter 4 for post order traversal\t");
scanf("%d",&choice);
switch(choice) {
case 1:
root=create();
break;
case 2:
preorder(root);
break;
case 3:
inorder(root);
break;
case 4:
postorder(root);
break;
default:
exit(1);
}
}
}

node* create() {
int key;
node* newnode=NULL;
printf("\nEnter data here(Enter -1 to stop)\t");
scanf("%d",&key);
if(key==-1)
        return NULL;

newnode=(node*)malloc(sizeof(node));
newnode->llink=newnode->rlink=NULL;
newnode->data=key;
printf("\nEnter data to be stored in left node\t");
newnode->llink=create(newnode);
printf("\nEnter data to be stored in right node\t");
newnode->rlink=create(newnode);
return newnode;
}

void preorder(node *t) {
if(t!=NULL) {
    printf("\n%d\t",t->data);
    preorder(t->llink);
    preorder(t->rlink);
}
}

void inorder(node *t) {
if(t!=NULL) {
    inorder(t->llink);
    printf("\n%d\t",t->data);
    inorder(t->rlink);
}
}

void postorder(node *t) {
if(t!=NULL) {
    postorder(t->llink);
    postorder(t->rlink);
    printf("\n%d\t",t->data);
}
}
